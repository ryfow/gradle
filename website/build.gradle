/*
 * Copyright 2010 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import groovy.text.SimpleTemplateEngine
import groovy.text.Template
import groovy.text.TemplateEngine
import java.util.regex.Matcher
import java.text.SimpleDateFormat

// we only need a test source set
apply plugin: 'groovy'
apply plugin: 'code-quality'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply from: '../gradle/codeQuality.gradle'
apply from: '../gradle/ssh.gradle'

VersionInfo versionInfo = new VersionInfo()
RemoteLocations remoteLocations = new RemoteLocations(versionInfo: versionInfo)

repositories {
    mavenCentral()
}
configurations {
    integTestCompile { extendsFrom groovy }
}
dependencies {
    groovy localGroovy()
    testCompile 'junit:junit:4.7'
    testCompile 'net.sourceforge.htmlunit:htmlunit:2.8'
}

webSrcDir = file('src')

if (!hasProperty('gradleCorePath')) {
    gradleCorePath = projectDir.parentFile
} else {
    gradleCorePath = file(gradleCorePath)
}
File generatedDocs = new File("$gradleCorePath/subprojects/docs/build/websiteDocs")

//buildWebsiteDir = new File(System.getProperty('user.home'), 'Sites/gradle')
buildWebsiteDir = new File(buildDir, 'website')
buildWebsiteNoFileExtensionsDir = new File(buildDir, 'website-no-extensions')

checkstyleConfigDir = "$gradleCorePath/config/checkstyle"
checkstyleProperties.checkstyleConfigDir = checkstyleConfigDir
checkstyleConfigFileName = "$checkstyleConfigDir/checkstyle.xml"
codeNarcConfigFileName = "$gradleCorePath/config/codenarc.xml"

task userguideContent << {
    def startParams = gradle.startParameter.newBuild()
    startParams.taskNames = ['websiteDocs']
    startParams.currentDir = gradleCorePath
    def launcher = GradleLauncher.newInstance(startParams)
    launcher.run().rethrowFailure()
}

releases = []
task configureReleases << {
    def releasesFile = new File(generatedDocs, "releases.xml")
    assert releasesFile.exists() : "$releasesFile does not exist. Please run :docs:websiteDocs"
    def releaseXml = new XmlParser().parse(releasesFile)
    def current = releaseXml.current[0]
    def snapshot = current.'@type' == 'snapshot'
    def currentRelease
    if (snapshot) {
        currentRelease = new CurrentSnapshot(version: current.'@version', versionInfo: versionInfo, buildTime: current.'@build-time')
    } else {
        currentRelease = new CurrentRelease(version: current.'@version', versionInfo: versionInfo, buildTime: current.'@build-time')
    }
    println "Is release version: $versionInfo.release"
    println "Current release distribution url: ${currentRelease.allDistributionUrl}"
    println "Current release distribution base: ${currentRelease.distributionBase}"
    releases << currentRelease
    releaseXml.release.each {
        def broken = it.attributes()['status'] == 'broken'
        releases << new Release(version: it.'@version', broken: broken, versionInfo: versionInfo, buildTime: it.'@build-time')
    }
}

task html(dependsOn: configureReleases) {
    inputs.dir file("src")
    outputs.dir buildWebsiteDir
    doFirst {
        buildWebsiteDir.mkdirs()
        File webContentSrcDir = new File(webSrcDir, 'content')
        def engine = new SimpleTemplateEngine()
        def binding = [
                php: new PhpIncludes(phpSrcDir: new File(webSrcDir, 'php')),
                currentRelease: releases[0],
                releases: releases,
                previousReleases: releases.subList(1, releases.size())
        ]
        binding.sidebar = engine.createTemplate(new File(webSrcDir, 'sidebar.html')).make(binding).toString()
        def skeletonTemplate = engine.createTemplate(new File(webSrcDir, 'skeleton.html'))

        List pages = []
        webContentSrcDir.eachFileMatch(~/^.+?\.html$/) { pages << new Page(srcFile: it) }
        generatedDocs.eachFileMatch(~/^.+?\.html$/) {
            if (it.name != 'userguide.html' && it.name != 'website.html') {
                pages << new GeneratedPage(srcFile: it)
            }
        }
        pages << new IndexPage(srcFile: "$webContentSrcDir/index.php" as File)
        pages << new PhpPage(srcFile: "$webContentSrcDir/news.php" as File)
        pages << new PhpPage(srcFile: "$webContentSrcDir/cookbook.php" as File)
        pages << new PhpPage(srcFile: "$webContentSrcDir/roadmap.php" as File)
        pages.each { Page page ->
            page.destFile = new File(buildWebsiteDir, page.srcFile.name)
            page.engine = engine
            page.pageTemplate = skeletonTemplate
            page.templateBinding = binding
            page.transform()
        }

        copy {
            into buildWebsiteDir
            from(webSrcDir) {
                include 'css/**'
                include 'img/**'
                include 'other-resources/**'
                include 'php/*.inc'
            }
            from(generatedDocs) {
                include 'base.css'
                into 'css'
            }
            from(generatedDocs) {
                include 'img/**'
            }
        }
    }
}

assemble.dependsOn html

// have to copy these separately so we don't attempt to filter, which messes up binary files
task htmlNoFileExtensionsNoFilter(type: Copy) {
    from html.outputs.files
    into buildWebsiteNoFileExtensionsDir
    exclude "**/*.html", "**/*.php"
}

task htmlNoFileExtensions(type: Copy, dependsOn: [htmlNoFileExtensionsNoFilter]) {
    from html.outputs.files
    into buildWebsiteNoFileExtensionsDir
    include "**/*.html", "**/*.php"
    filter {
        it.replaceAll("href=[\"']([\\w-]+)\\.(?:html|php)", "href=\"\$1")
    }
    outputs.dir buildWebsiteNoFileExtensionsDir
}

// A marker to indicate we are doing a release
task releaseVersion
gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(releaseVersion)) {
        versionInfo.release = true
    }
}

test {
    dependsOn html
    systemProperties 'test.base.uri': buildWebsiteDir.toURI()
    systemProperties 'test.ignore.docs': true
    inputs.dir buildWebsiteDir
}

task uploadHtml(dependsOn: htmlNoFileExtensions, type: Scp) {
    sourceDir = buildWebsiteNoFileExtensionsDir
    gradle.taskGraph.whenReady {
        destinationDir = remoteLocations.scpDir
    }
    host = 'gradle01.managed.contegix.com'
    userName = project.hasProperty('websiteScpUserName') ? project.websiteScpUserName : null
    password = project.hasProperty('websiteScpUserPassword') ? project.websiteScpUserPassword : null
}

task linkCurrent(type: SshExec, dependsOn: configureReleases) {
    configureReleases.doLast {
        linkCurrent.commandLine('rm', '-f', "${remoteLocations.scpDir}/current" as String)
        linkCurrent.commandLine('ln', '-s', "${remoteLocations.webRootDir}/${releases[0].remoteDir}" as String, "${remoteLocations.scpDir}/current" as String)
    }
    host = 'gradle01.managed.contegix.com'
    userName = project.hasProperty('websiteScpUserName') ? project.websiteScpUserName : null
    password = project.hasProperty('websiteScpUserPassword') ? project.websiteScpUserPassword : null
}

task uploadWebsite(dependsOn: [uploadHtml, linkCurrent])

task testRemote(type: Test, dependsOn: uploadWebsite) {
    doFirst {
        systemProperties 'test.base.uri': remoteLocations.websiteUrl
    }
    systemProperties 'test.ignore.docs': false
}

task install(type: Copy) {
    from htmlNoFileExtensions.outputs.files
    into "${System.getProperty('user.home')}/Sites/gradle"
}

task fullInstall(dependsOn: install)

class WebsiteGitRepoComponentsExtension {
    Project project
    
    def methodMissing(String path, arguments) {
        if (arguments.size() != 1) {
            throw new IllegalArgumentException("WebsiteGitRepoComponentsExtension DSL only accepts methods with one arg")
        }
        
        def repoUrl = arguments[0]
        def friendlyName = path.capitalize()
        def checkoutTask = project.tasks.add(name: "checkout$friendlyName", type: Exec, dependsOn: project.install) { task ->
            task.checkoutDir = project.file("$project.install.destinationDir/$path")
            task.executable "git"
            task.args "clone", repoUrl, checkoutDir
            task.onlyIf { !checkoutDir.exists() }
        }
        
        project.fullInstall.dependsOn project.tasks.add(name: "update$friendlyName", type: Exec, dependsOn: [checkoutTask]) { task ->
            task.executable "git"
            task.args "pull"
            task.workingDir checkoutTask.checkoutDir
        }
    }
}
project.extensions.add("websiteGitRepoComponents", new WebsiteGitRepoComponentsExtension(project: project))

websiteGitRepoComponents {
    board "git@github.com:gradleware/gradle-status-board.git"
    trainings "git@github.com:gradleware/training-data.git"
}

task ciBuild(dependsOn: [clean, html, uploadWebsite, testRemote])

task release(dependsOn: [releaseVersion, clean, html, uploadWebsite, testRemote])

class Page {
    def File srcFile
    def File destFile
    def Template pageTemplate
    def Map templateBinding
    def TemplateEngine engine

    def transform() {
        destFile.text = text
    }

    def getTitle() {
        def content = srcFile.text
        def matcher = content =~ /<h1.*>([^<]+)<\/h1>/
        if (!matcher) {
            throw new GradleException("Could not find title in $srcFile.name.")
        }
        def title = matcher[0][1].trim()
        title
    }

    def getContent() {
        try {
            def contentTemplate = engine.createTemplate(srcFile.text)
            contentTemplate.make(templateBinding).toString()
        } catch (Exception e) {
            throw new GradleException("Could not generate output file for '${srcFile.name}.", e)
        }
    }

    def getText() {
        pageTemplate.make(templateBinding + [fileName: srcFile.name, content: content, title: title]).toString()
    }
}

class PhpPage extends Page {

    def String getText() {
        File webPhpSrcDir = new File(srcFile.parentFile.parentFile, 'php')
        String prefix = srcFile.name.replace('.php', 'Php')
        File prefixFile = new File(webPhpSrcDir, "${prefix}Header.php")
        String text = super.getText()
        return prefixFile.file ? prefixFile.text + text : text
    }
}

class IndexPage extends PhpPage {
    def Object getTitle() {
        'Home'
    }
}

class GeneratedPage extends Page {
    def String getContent() {
        srcFile.text
    }
}

class PhpIncludes {
    def File phpSrcDir

    def propertyMissing(String name) {
        File srcFile = new File(phpSrcDir, "${name}.php")
        if (!srcFile.file) {
            throw new MissingPropertyException(name, PhpIncludes.class)
        }
        srcFile.text
    }
}

class Release {
    def String title
    def String version
    def VersionInfo versionInfo
    def boolean broken
    def String buildTime

    def BigDecimal getMajorVersion() {
        Matcher matcher = version =~ /(\d+\.\d+).*/
        matcher.matches()
        return matcher.group(1) as BigDecimal
    }

    def String getReleaseNoteVersion() {
        if (version.startsWith("0.9-rc")) {
            return "0.9"
        }
        return version
    }

    def String getDisplayName() {
        return "Gradle $version"
    }

    def String getReleaseDate() {
        return buildTime ? new SimpleDateFormat("d MMMM yyyy").format(new SimpleDateFormat("yyyyMMddHHmmssZ").parse(buildTime)) : null
    }

    def String getAllDistributionUrl() {
        return "${distributionBase}gradle-${version}-all.zip"
    }

    def String getBinDistributionUrl() {
        return "${distributionBase}gradle-${version}-bin.zip"
    }

    def String getSrcDistributionUrl() {
        return "${distributionBase}gradle-${version}-src.zip"
    }

    def String getDistributionBase() {
        if (majorVersion >= 0.9 && !version.startsWith('0.9-rc')) {
            return "http://repo.gradle.org/gradle/distributions/"
        } else {
            return "http://dist.codehaus.org/gradle/"
        }
    }

    def String getDocsUrl() {
        return "/${remoteDir}/docs"
    }

    def String getRemoteDir() {
        return "releases/${version}"
    }

    def String getReleaseNotesUrl() {
        return "http://wiki.gradle.org/display/GRADLE/Gradle+${releaseNoteVersion}+Release+Notes"
    }

    def String getMigrationNotesUrl() {
        return "http://wiki.gradle.org/display/GRADLE/Gradle+${releaseNoteVersion}+Migration+Guide"
    }

    def String getUserGuideHtmlUrl() {
        return "${docsUrl}/userguide/userguide.html"
    }

    def String getUserGuideSingleHtmlUrl() {
        return "${docsUrl}/userguide/userguide_single.html"
    }

    def String getUserGuidePdfUrl() {
        return "${docsUrl}/userguide/userguide.pdf"
    }

    def boolean getHasDsldoc() {
        return majorVersion >= 0.9 && !version.startsWith('0.9-rc')
    }

    def String getDsldocUrl() {
        return "${docsUrl}/dsl/index.html"
    }

    def String getJavadocUrl() {
        return "${docsUrl}/javadoc/index.html"
    }

    def String getGroovydocUrl() {
        return "${docsUrl}/groovydoc/index.html"
    }
}

class CurrentRelease extends Release {
    def String getDisplayName() {
        return "Gradle $version (current stable)"
    }

    def String getDocsUrl() {
        return "/current/docs"
    }
}

class CurrentSnapshot extends Release {
    def String getDisplayName() {
        return "Gradle $version (current snapshot)"
    }

    def String getDocsUrl() {
        return "/releases/latest/docs"
    }

    def String getDistributionBase() {
        return "http://repo.gradle.org/gradle/distributions-snapshots/"
    }

    @Override
    String getReleaseNoteVersion() {
        return "1.0-next"
    }
}

class VersionInfo {
    boolean release
}

class RemoteLocations {
    VersionInfo versionInfo

    String getWebsiteUrl() {
        return versionInfo.release ? 'http://www.gradle.org/' : 'http://www.gradle.org/latest/'
    }

    String getWebRootDir() {
        return '/var/www/domains/gradle.org/www/htdocs'
    }

    String getScpDir() {
        return versionInfo.release ? webRootDir : "$webRootDir/latest"
    }
}